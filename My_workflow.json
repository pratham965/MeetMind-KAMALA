{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {
        "fieldToSplitOut": "output.action_items",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        1620,
        60
      ],
      "id": "9d2c7e52-e3d5-45f3-9da1-1cda810ea9b4",
      "name": "Split Out"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"summary\": [\n    \"Ritika will lead the homepage redesign with updated visuals, due by Tuesday.\",\n    \"Jamie will investigate mobile responsiveness issues flagged by users, with a report due by next Thursday.\",\n    \"Taylor will draft a proposed blog content calendar to address missed weekly posts, due by Friday.\",\n    \"The team will reconvene next week to review progress.\"\n  ],\n  \"action_items\": [\n    {\n      \"task\": \"Update the visuals for the website homepage redesign.\",\n      \"assignee\": \"Ritika\",\n      \"email\": \"ritika@example.com\",\n      \"due\": \"2025-06-24\"\n    },\n    {\n      \"task\": \"Investigate mobile responsiveness issues and report findings.\",\n      \"assignee\": \"Jamie\",\n      \"email\": \"jamie@example.com\",\n      \"due\": \"2025-06-27\"\n    },\n    {\n      \"task\": \"Draft a proposed blog content calendar.\",\n      \"assignee\": \"Taylor\",\n      \"email\": \"taylor@gmail.com\",\n      \"due\": \"2025-06-23\"\n    }\n  ]\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        1484,
        330
      ],
      "id": "59222fa2-d032-4504-b66c-19f4ce3ae551",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "jsCode": "// Extract the incoming POST body\nconst data = $input.first().json.body;\n\nconst nameEmailDict = {};\n\n// Sort keys like \"speaker_1\", \"speaker_2\", etc.\nconst keys = Object.keys(data).sort((a, b) => {\n  return parseInt(a.split('_')[1]) - parseInt(b.split('_')[1]);\n});\n\n// Build name-email dictionary\nfor (const key of keys) {\n  const fullValue = data[key].trim();\n  if (fullValue) {\n    const parts = fullValue.split(' ');\n    if (parts.length >= 2) {\n      const name = parts[0];\n      const email = parts.slice(1).join(' ');\n      nameEmailDict[name] = email;\n    }\n  }\n}\n\n// Return only nameEmailDict as a single JSON object\nreturn[ \n  {\n    \"nameEmailDict\": nameEmailDict\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        520,
        60
      ],
      "id": "b47289be-b728-43ab-a7a5-4663b9ca5a02",
      "name": "Code"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.assemblyai.com/v2/upload",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": ""
            },
            {
              "name": "Content-Type",
              "value": "application/octet-stream"
            }
          ]
        },
        "sendBody": true,
        "contentType": "binaryData",
        "inputDataFieldName": "file",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -140,
        -140
      ],
      "id": "036488cb-74c7-4bb4-87f4-1db4932f18b1",
      "name": "Upload Audio File",
      "retryOnFail": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.assemblyai.com/v2/transcript",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": ""
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "audio_url",
              "value": "={{ $json.upload_url }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        80,
        -140
      ],
      "id": "3b3a12a2-add7-4a6c-9aa6-9f0bc767d709",
      "name": "Initiate Transcription"
    },
    {
      "parameters": {
        "url": "=https://api.assemblyai.com/v2/transcript/{{ $json.id }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": ""
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        520,
        -140
      ],
      "id": "e2390208-5d1e-48be-bcaf-b59833f34c1c",
      "name": "Get Transcription"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"data\": \"Attendees:\\n\\n• **Morgan Blake** (morgan.blake@example.com)\\n• **Priya Shah** (priya.shah@example.com)\\n...\\n\\nMorgan: Thanks, everyone...\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        1040,
        40
      ],
      "id": "e4828e43-2bfa-493c-8241-e674fc685480",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "upload-transcript/audio",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -260,
        40
      ],
      "id": "c867ef09-8b06-4c1c-afe3-048628acc895",
      "name": "Audio Input",
      "webhookId": "cd5ff2ea-2933-49c2-b816-a75d2d3cb583"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Transcript: {{ $json.text }}\nNames_EmailID: {{ $json.nameEmailDict }}\n\nYou are an assistant that formats meeting transcripts into a readable and structured plain text format.\n\nInput:\n- A dictionary of attendees with their full names and emails. For example:\n  {\n    \"Morgan Blake\": \"morgan.blake@example.com\",\n    \"Priya Shah\": \"priya.shah@example.com\",\n    \"Leo Tran\": \"leo.tran@example.com\",\n    \"Jordan Ellis\": \"jordan.ellis@example.com\"\n  }\n\n- A raw meeting transcript with speaker names and their dialogue.\n\nTask:\n- Generate an \"Attendees\" section listing each attendee with:\n  - Full name in bold-like formatting (e.g., **Morgan Blake**)\n  - Email in parentheses (e.g., (morgan.blake@example.com))\n\n- Then reproduce the full transcript dialogue below, labeling each speaker with bold-like name followed by a colon and their message.\n\n- Highlight any dates, deadlines, or time references by wrapping them in double asterisks (e.g., **Tuesday next week**)\n\nOutput:\n- Return the final result as a plain string, under the field `\"data\"` instead of `\"text\"`.\n\nReturn only a JSON object like this and strictly this:\n{\n  \"data\": \"Attendees:\\n\\n• **Morgan Blake** (morgan.blake@example.com)\\n• **Priya Shah** (priya.shah@example.com)\\n...\\n\\nMorgan: Thanks, everyone...\"\n}\n",
        "hasOutputParser": true,
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        860,
        -140
      ],
      "id": "1f50866b-d50d-4c13-929e-eec3f496e717",
      "name": "Format Transcription with Speakers"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Today's Date: {{ $now }}\nTranscript:\n{{ $json.output.data }}\n\nIf you are not able to see Today's Date, dont include due dates\n\nYou are a meeting assistant AI.\n\nYour job is to:\n1. Generate a short summary of key discussion points.\n2. Identify action items from the transcript, including:\n   - Task description\n   - Person responsible (by name)\n   - Email ID of the person\n   - Deadline (if mentioned (make sure the dates align); else suggest a reasonable one)\n\nOutput format:\n{\n  \"summary\": [ \"point 1\", \"point 2\", ... ],\n  \"action_items\": [\n    {\n      \"task\": \"Update the website homepage\",\n      \"assignee\": \"Ritika\",\n      \"email\": \"ritika@gmail.com\"\n      \"due\": \"2025-06-24\"\n    },\n    ...\n  ]\n}",
        "hasOutputParser": true,
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        1336,
        110
      ],
      "id": "e9a463c1-079f-4d7f-bd69-a59d5f0bafe0",
      "name": "Generate main output"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "upload-transcript/text",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        740,
        260
      ],
      "id": "3e94bfaf-08b3-4d67-ac1e-1e6daa20ebf0",
      "name": "Text Input",
      "webhookId": "428008b6-5c64-4d22-b207-2877da88e229"
    },
    {
      "parameters": {
        "content": "## Audio Section\n**Handles .mp3 Input**\n**Upload and Recieve Transcriptions from AssemblyAI**\n**Format transcription with Speaker addition** ",
        "height": 460,
        "width": 1400
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -272,
        -240
      ],
      "typeVersion": 1,
      "id": "d288eb65-00e8-4777-b788-9a7cbf9139b7",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## Text Section\n**Handles .txt Input**\n**Parses it to generate valid JSON**",
        "height": 260,
        "width": 680
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        599,
        160
      ],
      "typeVersion": 1,
      "id": "96401b55-8562-4757-8aa0-010ef9bb6010",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## LLM Generation\n**Formats input**\n**Generates Valid output**",
        "height": 480,
        "width": 560,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1294,
        -10
      ],
      "typeVersion": 1,
      "id": "85226d25-b5fe-4604-ae47-66512af5eb88",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "authentication": "webhook",
        "content": "=Summary for the meeting held on {{$now}}\n{{ $json.output.summary }}",
        "options": {}
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        1820,
        300
      ],
      "id": "640e9948-5d27-48f4-aafd-46b3604532f4",
      "name": "Discord",
      "webhookId": "4cff1fdd-7add-463f-ab65-42745c1926d5",
      "credentials": {
        "discordWebhookApi": {
          "id": "bEX1kfhilKkZaaGA",
          "name": "Discord Webhook account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Update Calendar and summary \n**Generates Google Calendar Event with notifications through Mail**\n**Sends Summary on Discord on the company channel**",
        "height": 520,
        "width": 300,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1740,
        -40
      ],
      "typeVersion": 1,
      "id": "921007d3-d97c-4f18-87d2-a8805f91c01c",
      "name": "Sticky Note3"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        740,
        -40
      ],
      "id": "8962e8ef-f071-4cfc-9706-a0a0eff08bdc",
      "name": "Merge"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        900,
        40
      ],
      "id": "8f99386a-0dd7-4143-92d5-cb4df180b6d5",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "bvqY3ajPkOBe9mLA",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1364,
        330
      ],
      "id": "fbffa3e9-0e9d-4389-be75-a35e0c3ccf5c",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "bvqY3ajPkOBe9mLA",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        300,
        -140
      ],
      "id": "6e339bb8-7b1e-46b1-a372-c084d11e621a",
      "name": "Wait",
      "webhookId": "aba7a9ad-bfd3-48cc-881d-ceb717010d30"
    },
    {
      "parameters": {
        "keys": {
          "key": [
            {
              "currentKey": "body.file",
              "newKey": "output.data"
            }
          ]
        },
        "additionalOptions": {}
      },
      "type": "n8n-nodes-base.renameKeys",
      "typeVersion": 1,
      "position": [
        1038,
        260
      ],
      "id": "18d15196-1673-490a-bf12-99c6e2d8dc27",
      "name": "Parser"
    },
    {
      "parameters": {
        "calendar": {
          "__rl": true,
          "value": "38c6b82af42c16291c2f3b39979eac650f817fcb4f88e8887b42c1bff849f0a7@group.calendar.google.com",
          "mode": "list",
          "cachedResultName": "CompanyTasks"
        },
        "end": "={{ $json.due }}",
        "additionalFields": {
          "attendees": [],
          "description": "={{ $json.task }}",
          "summary": "={{ $json.assignee }}:{{ $json.task }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        1820,
        160
      ],
      "id": "631e98b6-5407-4d6d-82f5-974151d6bc5c",
      "name": "Google Calendar",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "DoGMNL8asv1YDTXs",
          "name": "Google Calendar account 3"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Split Out": {
      "main": [
        [
          {
            "node": "Google Calendar",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Generate main output",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Upload Audio File": {
      "main": [
        [
          {
            "node": "Initiate Transcription",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Initiate Transcription": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Transcription": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Format Transcription with Speakers",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Audio Input": {
      "main": [
        [
          {
            "node": "Upload Audio File",
            "type": "main",
            "index": 0
          },
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Transcription with Speakers": {
      "main": [
        [
          {
            "node": "Generate main output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate main output": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          },
          {
            "node": "Discord",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Text Input": {
      "main": [
        [
          {
            "node": "Parser",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Format Transcription with Speakers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Format Transcription with Speakers",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Generate main output",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Get Transcription",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parser": {
      "main": [
        [
          {
            "node": "Generate main output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "bad5b0b4-d215-42ce-82b8-31c2a2089967",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "6ba001675d5ce840efbad701749c06b9221f0dad9bfaa11007a9c109c30814c9"
  },
  "id": "krRPGz73lc2WakMN",
  "tags": []
}